// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SCA.Infrastructure;

#nullable disable

namespace SCA.Infrastructure.Migrations
{
    [DbContext(typeof(SmartChargingAssignmentContext))]
    [Migration("20240920173049_RowVersion")]
    partial class RowVersion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("HamedStack.TheRepository.EntityFrameworkCore.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTimeOffset?>("ProcessedOn")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RetryCount")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages");
                });

            modelBuilder.Entity("SCA.Domain.Entities.ChargeStation", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.ToTable("ChargeStation", (string)null);
                });

            modelBuilder.Entity("SCA.Domain.Entities.Connector", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("ChargeStationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChargeStationId");

                    b.HasIndex("Id", "ChargeStationId")
                        .IsUnique();

                    b.ToTable("Connector", (string)null);
                });

            modelBuilder.Entity("SCA.Domain.Entities.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("Version")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Group", (string)null);
                });

            modelBuilder.Entity("SCA.Domain.Entities.ChargeStation", b =>
                {
                    b.HasOne("SCA.Domain.Entities.Group", "Group")
                        .WithMany("ChargeStations")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SCA.Domain.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("ChargeStationId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("Name");

                            b1.HasKey("ChargeStationId");

                            b1.ToTable("ChargeStation");

                            b1.WithOwner()
                                .HasForeignKey("ChargeStationId");
                        });

                    b.Navigation("Group");

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("SCA.Domain.Entities.Connector", b =>
                {
                    b.HasOne("SCA.Domain.Entities.ChargeStation", "ChargeStation")
                        .WithMany("Connectors")
                        .HasForeignKey("ChargeStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("SCA.Domain.ValueObjects.MaxCurrentInAmps", "MaxCurrentInAmps", b1 =>
                        {
                            b1.Property<int>("ConnectorId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("Value")
                                .HasColumnType("INTEGER")
                                .HasColumnName("MaxCurrent");

                            b1.HasKey("ConnectorId");

                            b1.ToTable("Connector");

                            b1.WithOwner()
                                .HasForeignKey("ConnectorId");
                        });

                    b.Navigation("ChargeStation");

                    b.Navigation("MaxCurrentInAmps")
                        .IsRequired();
                });

            modelBuilder.Entity("SCA.Domain.Entities.Group", b =>
                {
                    b.OwnsOne("SCA.Domain.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<Guid>("GroupId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("TEXT")
                                .HasColumnName("Name");

                            b1.HasKey("GroupId");

                            b1.ToTable("Group");

                            b1.WithOwner()
                                .HasForeignKey("GroupId");
                        });

                    b.OwnsOne("SCA.Domain.ValueObjects.CapacityInAmps", "CapacityInAmps", b1 =>
                        {
                            b1.Property<Guid>("GroupId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Value")
                                .HasColumnType("INTEGER")
                                .HasColumnName("Capacity");

                            b1.HasKey("GroupId");

                            b1.ToTable("Group");

                            b1.WithOwner()
                                .HasForeignKey("GroupId");
                        });

                    b.Navigation("CapacityInAmps")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("SCA.Domain.Entities.ChargeStation", b =>
                {
                    b.Navigation("Connectors");
                });

            modelBuilder.Entity("SCA.Domain.Entities.Group", b =>
                {
                    b.Navigation("ChargeStations");
                });
#pragma warning restore 612, 618
        }
    }
}
